const baseURL = "http://localhost:3000/api/";

const apiRoutes = {
  auth: {
    signIn: "auth/sign-in",
    signUp: "auth/sign-up",
    signOut: "auth/sign-out",
    refreshToken: "auth/rftk",
    requestRecover: "auth/request-recover",
    recover: "auth/recover",
  },
  staffAuth: {
    getAll: "staff-auth/",
    create: "staff-auth/new",
    signIn: "staff-auth/sign-in",
    signUp: "staff-auth/sign-up",
    signOut: "staff-auth/sign-out",
    refreshToken: "staff-auth/rftk",
  },
  staff: {
    getAll: "staffs/",
    getStaffInfo: (staffId: string) => `staffs/${staffId}`,
    changeRole: (staffId: string) => `staffs/${staffId}/role`,
    jobQuit: (staffId: string) => `staffs/${staffId}/quit`,
    active: (staffId: string) => `staffs/${staffId}/active`,
    changeBranch: (staffId: string) => `staffs/${staffId}/change-branch`,
  },
  orders: {
    create: "orders/group",
    updatePaymentStatus: (orderId: string) => `orders/group/${orderId}/payment`,
    getAll: "orders/",
    getOrderByGroupId: (orderGroupId: string) => `orders/group/${orderGroupId}`,
    getOne: (orderId: string) => `orders/${orderId}`,
    cancelOrder: (orderId: string) => `orders/${orderId}/destroy`,
    updateStatus: (orderId: string) => `orders/${orderId}/status`,
    rates: (orderId: string) => `orders/${orderId}/rates`,
    analytics: `/orders/analytics`,
    selfOrder: `/orders/self`,
  },
  plans: {
    getAll: "plans/",
    create: "plans/",
    getOne: (planId: string) => `plans/${planId}`,
    edit: (planId: string) => `plans/${planId}`,
    delete: (planId: string) => `plans/${planId}`,
    updateStatus: (planId: string) => `plans/${planId}/status`,
    addQueue: (planId: string) => `plans/${planId}/queue-production`,
  },
  cakeRecipe: {
    getAll: "recipes/",
    create: "recipes/",
    getOne: (cakeRecipeId: string) => `recipes/${cakeRecipeId}`,
    edit: (cakeRecipeId: string) => `recipes/${cakeRecipeId}`,
    getListCakeUseRecipe: (cakeRecipeId: string) => `recipes/${cakeRecipeId}/cakes`,
    softDelete: (cakeRecipeId: string) => `recipes/${cakeRecipeId}/delete`,
    recover: (cakeRecipeId: string) => `recipes/${cakeRecipeId}/recover`,
    delete: (cakeRecipeId: string) => `recipes/${cakeRecipeId}`,
  },
  materials: {
    create: "materials/",
    getAll: "materials/",
    getAnalytics: (materialId: string) => `materials/${materialId}/analytics`,
    softDelete: (materialId: string) => `materials/${materialId}/delete`,
    recover: (materialId: string) => `materials/${materialId}/recover`,
    delete: (materialId: string) => `materials/${materialId}`,
    edit: (materialId: string) => `materials/${materialId}`,
    detail: (materialId: string) => `/materials/${materialId}`,
    getListBranches: (materialId: string) => `materials/${materialId}/branches`,
    getListRecipes: (materialId: string) => `materials/${materialId}/recipes`,
    getListSuppliers: (materialId: string) => `materials/${materialId}/suppliers`,
  },
  suppliers: {
    create: "suppliers/",
    getAll: "suppliers/",
    getOne: (supplierId: string) => `suppliers/${supplierId}`,
    edit: (supplierId: string) => `suppliers/${supplierId}`,
    delete: (supplierId: string) => `suppliers/${supplierId}`,
    softDelete: (supplierId: string) => `suppliers/${supplierId}/delete`,
    recover: (supplierId: string) => `suppliers/${supplierId}/recover`,
    getImportRequests: (supplierId: string) => `suppliers/${supplierId}/import-requests`,
  },
  importRequests: {
    getAll: "import-requests/",
    getOne: (requestId: string) => `import-requests/${requestId}`,
    updateStatus: (requestId: string) => `import-requests/${requestId}/status`,
  },
  customers: {
    getAll: "customers/",
    getOne: (userId: string) => `customers/${userId}`,
    orders: (customerId: string) => `customers/${customerId}/orders`,
    cart: {
      getAll: (customerId: string) => `customers/${customerId}/cart`,
    },
    changePassword: `customers/change-pwd`,
    customerCart: "customers/:customerId/cart",
    voucherList: "customers/:customerId/vouchers",
    block: (userId: string) => `customers/${userId}/block`,
    unblock: (userId: string) => `customers/${userId}/unblock`,
    me: {
      info: "customers/me",
      cart: "customers/me/cart",
      orders: "customers/me/orders",
      addresses: "customers/me/addresses",
      feedbacks: "customers/me/feedbacks",
      // deleteFeedback: (cakeId: string, feedbackId: string) => `cakes/${cakeId}/delete-rate/${feedbackId}`,
      deleteFeedback: (cakeId: string) => `cakes/${cakeId}/delete-rate`,
      createAddress: "customers/me/addresses",
      getAddressInfo: (userId: string) => `customers/me/addresses/${userId}`,
      update: (userId: string) => `customers/me/addresses/${userId}`,
      delete: (userId: string) => `customers/me/addresses/${userId}`,
    },
  },
  email: {
    sendOtp: "email/send-otp",
  },
  cakes: {
    getAll: "cakes/",
    create: "cakes/",
    getOne: (cakeId: string) => `cakes/${cakeId}`,
    getRecipe: (cakeId: string) => `cakes/${cakeId}/recipe`,
    edit: (cakeId: string) => `cakes/${cakeId}`,
    getBranchList: "cakes/:cakeId/branches",
    increaseView: (cakeId: string) => `cakes/${cakeId}/views`,
    updateInforCake: "cakes/:cakeId/branches",
    delete: (cakeId: string) => `cakes/${cakeId}`,
    softDelete: (cakeId: string) => `cakes/${cakeId}/delete`,
    recover: (cakeId: string) => `cakes/${cakeId}/recover`,
  },
  categories: {
    getAll: "categories/",
    infor: (categoryId: string) => `categories/${categoryId}`,
    create: "categories/",
    update: (categoryId: string) => `categories/${categoryId}`,
    softDelete: (categoryId: string) => `categories/${categoryId}/delete`,
    recover: (categoryId: string) => `categories/${categoryId}/recover`,
    delete: (categoryId: string) => `categories/${categoryId}`,
    cakes: (categoryId: string) => `categories/${categoryId}/cakes`,
  },
  cart: {
    addToCart: "carts/",
    changeQuantity: "carts/",
    deleteCakeFromCart: "carts/delete",
    useDiscountCode: "carts/voucher",
    resetCart: "carts/",
  },
  vouchers: {
    getAll: "vouchers/",
    check: "vouchers/check",
    getOne: (voucherId: string) => `vouchers/${voucherId}`,
    checkVoucher: (voucherId: string) => `vouchers/${voucherId}`,
    create: "vouchers/",
    edit: (voucherId: string) => `vouchers/${voucherId}`,
    delete: (voucherId: string) => `vouchers/${voucherId}`,
    softDelete: (voucherId: string) => `vouchers/${voucherId}/delete`,
    recover: (voucherId: string) => `vouchers/${voucherId}/recover`,
  },
  branches: {
    getAll: "branches/",
    create: "branches/",
    getBranchInfo: (branchId: string) => `branches/${branchId}`,
    updateBranchInfor: (branchId: string) => `branches/${branchId}`,
    delete: (branchId: string) => `branches/${branchId}`,
    getBusinessProducts: (branchId: string) => `branches/${branchId}/business-products`,
    updateBusinessProducts: (branchId: string) => `branches/${branchId}/business-products`,
    getInventory: (branchId: string, type: string) => `branches/${branchId}/inventory?type=${type}`,
    updateMaterialInventory: (branchId: string) => `branches/${branchId}/inventory/materials`,
    updateCakeInventory: (branchId: string) => `branches/${branchId}/inventory/cakes`,
    getBranchOrders: (branchId: string) => `branches/${branchId}/orders`,
    visibility: (branchId: string) => `branches/${branchId}/visibility`,
    getImportRequests: (branchId: string) => `branches/${branchId}/import-requests`,
    createImportRequests: (branchId: string) => `branches/${branchId}/import-requests`,
    updateImportRequest: (branchId: string, importRequestId: string) =>
      `branches/${branchId}/import-requests/${importRequestId}`,
    cancelImportRequest: (branchId: string, importRequestId: string) =>
      `branches/${branchId}/import-requests/${importRequestId}/cancel`,
    suppliers: (branchId: string) => `branches/${branchId}/suppliers`,
    staffs: (branchId: string) => `branches/${branchId}/staffs`,
    vouchers: (branchId: string) => `branches/${branchId}/vouchers`,
    softDelete: (branchId: string) => `branches/${branchId}/delete`,
    recover: (branchId: string) => `branches/${branchId}/recover`,
    removeExpiredMaterials: (branchId: string) => `branches/${branchId}/remove-materials`,
  },
  locationAPI: {
    // provinces: "https://vapi.vnappmob.com/api/province/",
    provinces: "/vietnam_provinces_data.json",
    district: (provinceId: string) => `https://vapi.vnappmob.com/api/province/district/${provinceId}`,
    ward: (districtId: string) => `https://vapi.vnappmob.com/api/province/ward/${districtId}`,
  },
  vnPay: {
    createPayment: "vnpay/create-url",
    ipn: "vnpay/ipn",
  },
  analytics: {
    orders: {
      dailyOrdersInMonth: "analytics/orders/daily-orders-in-month",
      ordersInYear: "analytics/orders/orders-in-year",
    },
    customers: {
      dailyCustomersInMonth: "analytics/customers/daily-customers-in-month",
      customersInYear: "analytics/customers/customers-in-year",
    },
    root: "analytics",
  },
};

export { apiRoutes, baseURL };
